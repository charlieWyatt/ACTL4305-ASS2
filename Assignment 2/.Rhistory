testdata$BonusMalus <- normalizetest(testdata$BonusMalus, traindata$BonusMalus)
traindata$BonusMalus <- normalize(traindata$BonusMalus)
# Density
testdata$Density <- normalizetest(log(testdata$Density), log(traindata$Density))
traindata$Density <- normalize(log(traindata$Density))
# vehpower
testdata$VehPower <- normalizetest(testdata$VehPower, traindata$VehPower)
traindata$VehPower <- normalize(traindata$VehPower)
# vehage
testdata$VehAge <- normalizetest(testdata$VehAge, traindata$VehAge)
traindata$VehAge <- normalize(traindata$VehAge)
# claimNB
traindata <- traindata %>% mutate(ClaimNb_nn = normalize(traindata$ClaimNb))
# Dummy variables
Dummy <- function(var1, short, dat2) {
names(dat2)[names(dat2)==var1] <- "V1"
n2 <- ncol(dat2)
dat2$X <- as.integer(dat2$V1)
n0 <- length(unique(dat2$X))
for(n1 in 2:n0) {
dat2[,paste(short, n1, sep = "")] <- as.integer(dat2$X==n1)
names(dat2)[names(dat2)=="V1"] <- var1
dat2[,c(1:n2, (n2+2):ncol(dat2))]
}
dat2
}
# Area
unique(traindata$Area)
# For Area
traindata0 <- Dummy("Area", "ar", traindata)
testdata0 <- Dummy("Area", "ar", testdata)
# VehBrand
traindata1 <- Dummy("VehBrand", "vb", traindata)
testdata1 <- Dummy("VehBrand", "vb", testdata)
# VehGas
traindata2 <- Dummy("VehGas", "vg", traindata)
testdata2 <- Dummy("VehGas", "vg", testdata)
traindatafinal <- left_join(traindata0, traindata1) %>% left_join(traindata2)
testdatafinal <- left_join(testdata0, testdata1) %>% left_join(testdata2)
library(randomForest)
library(rpart.plot)
library(EnvStats)
library(tidyverse)
library(corrplot)
library(ROSE)
setwd("~/University/year3/T3/ACTL4305/Assignment/Assignment 2")
library(randomForest)
library(rpart.plot)
library(EnvStats)
library(tidyverse)
library(corrplot)
library(ROSE)
library(caret)
library(vip)
library(pdp)
library(pROC)
library(ROCR)
library(parallel)
library(doParallel)
setwd("~/University/year3/T3/ACTL4305/Assignment/Assignment 2")
data <- read_csv("A2-data.csv")[,-1]
factor_cols <- c("business.type", "driver.gender", "marital.status", "ncd.level", "region", "body.code", "fuel.type", "claim.count")
data <- data %>%
mutate_at(vars(factor_cols), funs(factor)) # makes all these factor variables
numeric_cols <- unlist(lapply(data, is.numeric))
numeric_data <- na.omit(data[,numeric_cols])
cor_data <- cor(numeric_data)
corrplot(cor_data, method = "circle")
# remove weight, length and vehicle age
data <- data %>% select(-c(weight, length, vehicle.age))
levels(data$claim.count)[6] <- "3"
levels(data$claim.count)[5] <- "3"
levels(data$claim.count)[4] <- "3+"
set.seed(654321)
train.index=createDataPartition(data$claim.incurred, p = 0.7, list = FALSE)
train=data[train.index,]
train <- train %>% select(-claim.count)
test=data[-train.index,]
rpart0 <- loadRDS(rpart0,file = "Objects/zerosplitFinal.RData")
rpart0 <- readRDS(rpart0,file = "Objects/zerosplitFinal.RData")
rpart0 <- readRDS(file = "Objects/zerosplitFinal.RData")
rpart1 <- readRDS(file = "Objects/rpartFinal.RData")
rf1 <- readRDS(file = "Objects/rfFinal.RData")
treebag0 <- readRDS(file = "Objects/treebagFinal.RData")
# intermediate models
rf0 <- readRDS(file = "Objects/mtuneRF.RData")
for(i in 1:30) {
j <- i*100
model_name <- paste0("rf_", j)
print(model_name)
filename <- paste0("Objects/", model_name, ".RData")
assign(model_name, readRDS(file = filename))
}
readRDS(rf_5000, file = "Objects/rf_5000.RData")
rf_5000 <- readRDS(file = "Objects/rf_5000.RData")
random_oob <- readRDS(file = "Objects/numTreeRF.RData")
vip(rf1$finalModel) +
ggtitle("RF Variable Importance")
predTable <- test %>% select(exposure, claim.incurred)
predTable$zerosplit <- predict(rpart0, newdata = test)
predTable$rpart <- predict(rpart1, newdata = test)
predTable$rf <- predict(rf1, newdata = test)
predTable$treebag <- predict(treebag0, newdata = test)
predTable
predPrem <- predTable
predPrem$claim.incurred <- predPrem$claim.incurred/predPrem$exposure
colnames(predPrem)[2] <- "pure.prem"
predPrem$zerosplit <- predPrem$zerosplit/predPrem$exposure
predPrem$rpart <- predPrem$rpart/predPrem$exposure
predPrem$rf <- predPrem$rf/predPrem$exposure
predPrem$treebag <- predPrem$treebag/predPrem$exposure
predPrem
test.errors <- as.data.frame(c("zero-split tree", "Rpart", "RandomForest", "Treebag"))
test.errors$RMSE <- c(caret::RMSE(predPrem$zerosplit, predPrem$pure.prem),
caret::RMSE(predPrem$rpart, predPrem$pure.prem),
caret::RMSE(predPrem$rf, predPrem$pure.prem),
caret::RMSE(predPrem$treebag, predPrem$pure.prem)
)
colnames(test.errors)[1] <- "Model"
test.errors
ggplot(test.errors) +
geom_point(aes(x = Model, y = RMSE)) +
ggtitle("Testing errors")
vip(treebag0) +
ggtitle("Bagging Variable Importance")
vip(treebag0) +
ggtitle("Bagging Variable Importance")
plot(rf0, main = "RF: Tuning Number of predictors used at each split")
bignodesizeMSE <- as.data.frame(c(1, seq(100,3000,100), 5000))
colnames(bignodesizeMSE)[1] <- "nodesize"
bignodesizeMSE$mse <- c(rep(0, nrow(bignodesizeMSE)))
bigbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bignodesizeMSE)-1)) {
j <- c(1,seq(100,3000,100))[i]
model <- paste0("rf_", j)
bignodesizeMSE[i, 2] = get(model)$finalModel$mse[100]
if(bignodesizeMSE[i, 2] < bigbestnodeMSE) {
bigbestnodesize <- j
bigbestnodeMSE <- bignodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/100)) {
j <- i*100
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
fitControl <- trainControl(
method = "cv",
number = 5,
allowParallel = TRUE) # parrallel computing saves run time
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/100)) {
j <- i*100
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 25,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/100)) {
j <- i*100
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
gc()
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 25,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/100)) {
j <- i*100
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
library(randomForest)
library(rpart.plot)
library(EnvStats)
library(tidyverse)
library(corrplot)
library(ROSE)
library(caret)
library(vip)
library(pdp)
library(pROC)
library(ROCR)
library(parallel)
library(doParallel)
setwd("~/University/year3/T3/ACTL4305/Assignment/Assignment 2")
data <- read_csv("A2-data.csv")[,-1]
factor_cols <- c("business.type", "driver.gender", "marital.status", "ncd.level", "region", "body.code", "fuel.type", "claim.count")
data <- data %>%
mutate_at(vars(factor_cols), funs(factor)) # makes all these factor variables
numeric_cols <- unlist(lapply(data, is.numeric))
numeric_data <- na.omit(data[,numeric_cols])
cor_data <- cor(numeric_data)
corrplot(cor_data, method = "circle")
# remove weight, length and vehicle age
data <- data %>% select(-c(weight, length, vehicle.age))
levels(data$claim.count)[6] <- "3"
levels(data$claim.count)[5] <- "3"
levels(data$claim.count)[4] <- "3+"
set.seed(654321)
train.index=createDataPartition(data$claim.incurred, p = 0.7, list = FALSE)
train=data[train.index,]
train <- train %>% select(-claim.count)
test=data[-train.index,]
fitControl <- trainControl(
method = "cv",
number = 5,
allowParallel = TRUE) # parrallel computing saves run time
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/100)) {
j <- i*100
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
maxNodesize <- 1300
bagnodesizeMSE <- as.data.frame(c(seq(100,maxNodesize,100)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bagnodesizeMSE))) {
j <- c(seq(100,maxNodesize,100))[i]
model <- paste0("bag_", j)
bagnodesizeMSE[i, 2] = get(model)$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
maxNodesize <- 1200
bagnodesizeMSE <- as.data.frame(c(seq(100,maxNodesize,100)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bagnodesizeMSE))) {
j <- c(seq(100,maxNodesize,100))[i]
model <- paste0("bag_", j)
bagnodesizeMSE[i, 2] = get(model)$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
plot(bagnodesizeMSE$nodesize, bagnodesizeMSE$mse, type = "l", xlab = "Nodesize", ylab = "RMSE", main = "Tuning node size: 100 tree Bagging")
points(bagbestnodesize, bagbestnodesize, col = "red", pch = 19)
library(randomForest)
library(rpart.plot)
library(EnvStats)
library(tidyverse)
library(corrplot)
library(ROSE)
library(caret)
library(vip)
library(pdp)
library(pROC)
library(ROCR)
library(parallel)
library(doParallel)
setwd("~/University/year3/T3/ACTL4305/Assignment/Assignment 2")
data <- read_csv("A2-data.csv")[,-1]
factor_cols <- c("business.type", "driver.gender", "marital.status", "ncd.level", "region", "body.code", "fuel.type", "claim.count")
data <- data %>%
mutate_at(vars(factor_cols), funs(factor)) # makes all these factor variables
numeric_cols <- unlist(lapply(data, is.numeric))
numeric_data <- na.omit(data[,numeric_cols])
cor_data <- cor(numeric_data)
corrplot(cor_data, method = "circle")
# remove weight, length and vehicle age
data <- data %>% select(-c(weight, length, vehicle.age))
levels(data$claim.count)[6] <- "3"
levels(data$claim.count)[5] <- "3"
levels(data$claim.count)[4] <- "3+"
gc()
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/200)) {
j <- i*200
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
set.seed(654321)
train.index=createDataPartition(data$claim.incurred, p = 0.7, list = FALSE)
train=data[train.index,]
train <- train %>% select(-claim.count)
test=data[-train.index,]
maxNodesize <- 3000
for(i in 1:(maxNodesize/200)) {
j <- i*200
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
fitControl <- trainControl(
method = "cv",
number = 5,
allowParallel = TRUE) # parrallel computing saves run time
sizedBag <- function(size, train) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "treebag",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
maxNodesize <- 3000
for(i in 1:(maxNodesize/200)) {
j <- i*200
model_name <- paste0("bag_", j)
print(model_name)
assign(model_name, sizedBag(j, train))
}
maxNodesize <- 2600
bagnodesizeMSE <- as.data.frame(c(seq(100,maxNodesize,200)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bagnodesizeMSE))) {
j <- c(seq(100,maxNodesize,200))[i]
model <- paste0("bag_", j)
bagnodesizeMSE[i, 2] = get(model)$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
maxNodesize <- 2600
bagnodesizeMSE <- as.data.frame(c(seq(200,maxNodesize,200)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bagnodesizeMSE))) {
j <- c(seq(200,maxNodesize,200))[i]
model <- paste0("bag_", j)
bagnodesizeMSE[i, 2] = get(model)$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
maxNodesize <- 2400
bagnodesizeMSE <- as.data.frame(c(seq(200,maxNodesize,200)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(nrow(bagnodesizeMSE))) {
j <- c(seq(200,maxNodesize,200))[i]
model <- paste0("bag_", j)
bagnodesizeMSE[i, 2] = get(model)$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- get(model)
}
}
plot(bagnodesizeMSE$nodesize, bagnodesizeMSE$mse, type = "l", xlab = "Nodesize", ylab = "RMSE", main = "Tuning node size: 100 tree Bagging")
points(bagbestnodesize, bagbestnodesize, col = "red", pch = 19)
bestmodel
rpart0 <- readRDS(file = "Objects/zerosplitFinal.RData")
rpart1 <- readRDS(file = "Objects/rpartFinal.RData")
rf1 <- readRDS(file = "Objects/rfFinal.RData")
treebag0 <- readRDS(file = "Objects/treebagFinal.RData")
random_oob <- readRDS(file = "Objects/numTreeRF.RData")
treebag0 <- bestmodel
bestmodel
predTable <- test %>% select(exposure, claim.incurred)
predTable$zerosplit <- predict(rpart0, newdata = test)
predTable$rpart <- predict(rpart1, newdata = test)
predTable$rf <- predict(rf1, newdata = test)
predTable$treebag <- predict(treebag0, newdata = test)
predTable
predPrem <- predTable
predPrem$claim.incurred <- predPrem$claim.incurred/predPrem$exposure
colnames(predPrem)[2] <- "pure.prem"
predPrem$zerosplit <- predPrem$zerosplit/predPrem$exposure
predPrem$rpart <- predPrem$rpart/predPrem$exposure
predPrem$rf <- predPrem$rf/predPrem$exposure
predPrem$treebag <- predPrem$treebag/predPrem$exposure
predPrem
test.errors <- as.data.frame(c("zero-split tree", "Rpart", "RandomForest", "Treebag"))
test.errors$RMSE <- c(caret::RMSE(predPrem$zerosplit, predPrem$pure.prem),
caret::RMSE(predPrem$rpart, predPrem$pure.prem),
caret::RMSE(predPrem$rf, predPrem$pure.prem),
caret::RMSE(predPrem$treebag, predPrem$pure.prem)
)
colnames(test.errors)[1] <- "Model"
test.errors
ggplot(test.errors) +
geom_point(aes(x = Model, y = RMSE)) +
ggtitle("Testing errors")
rf_1 <- sizedRf(1, train, test)
sizedRf <- function(size, train, test) {
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
out <- train(claim.incurred ~ ., data = train,
method = "rf",
trControl = fitControl,
ntree = 100,
nodesize = size)
stopCluster(cluster)
registerDoSEQ()
out
}
rf_!
rf_1
rf_1 <- sizedRf(1, train, test)
maxNodesize <- 3000
bagnodesizeMSE <- as.data.frame(c(seq(200,maxNodesize,200)))
colnames(bagnodesizeMSE)[1] <- "nodesize"
bagnodesizeMSE$mse <- c(rep(0, nrow(bagnodesizeMSE)))
bagbestnodeMSE <- Inf
bestmodel <- NULL
for(i in 1:(maxNodesize/200)) {
j <- i*200
model_name <- paste0("bag_", j)
print(model_name)
model <- sizedBag(j, train)
bagnodesizeMSE[i, 2] = model$results[2]$RMSE
if(bagnodesizeMSE[i, 2] < bagbestnodeMSE) {
bagbestnodesize <- j
bagbestnodeMSE <- bagnodesizeMSE[i, 2]
bestmodel <- model_name
}
}
